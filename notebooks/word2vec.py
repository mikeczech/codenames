# ---
# jupyter:
#   jupytext:
#     formats: ipynb,md,py:percent
#     text_representation:
#       extension: .py
#       format_name: percent
#       format_version: '1.3'
#       jupytext_version: 1.7.1
#   kernelspec:
#     display_name: Python 3
#     language: python
#     name: python3
# ---

# %% jupyter={"outputs_hidden": true}
# !python -m spacy download en_core_web_md`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````

# %%
# %load_ext lab_black

# %%
import spacy
import numpy as np
import umap
import altair as alt
import pandas as pd

# %%
nlp = spacy.load("en_core_web_lg")

# %%
len(list(nlp.vocab.strings))


# %%
def get_vector(word):
    return np.asarray([nlp.vocab.vectors[nlp.vocab.strings[word]]])


def most_similar(words, n=400):
    words = [w.lower() for w in words]
    centroid = np.mean([get_vector(w) for w in words], axis=0)
    most_sim_indices = nlp.vocab.vectors.most_similar(centroid, n=n)
    suggestions = [nlp.vocab.strings[w].lower() for w in most_sim_indices[0][0]]

    res = dict()
    for s in suggestions:
        if not any([w in s for w in words]):
            res[s] = get_vector(s)

    for w in words:
        res[w] = get_vector(w)

    return res


# %%
words = ["india", "germany", "usa", "spain"]

# %%
ms = most_similar(words)

# %%
X = np.asarray(list(ms.values())).squeeze()
X.shape

# %%
reducer = umap.UMAP()
embedding = reducer.fit_transform(X)

# %%
df_emb = (
    pd.DataFrame(embedding)
    .rename({0: "x", 1: "y"}, axis=1)
    .assign(
        label=list(ms.keys()),
        color=[0] * (len(embedding) - len(words)) + [1] * len(words),
    )
)
df_emb

# %%
alt.Chart(df_emb).mark_circle().encode(
    x="x", y="y", tooltip="label", color="color:N"
).interactive()

# %%
